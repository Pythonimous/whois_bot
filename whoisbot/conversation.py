from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ConversationHandler

from whoisbot.config import bot, logger, users, chats
from whoisbot.utils import introduce_user

CHAT,  RULES, NAME, AGE, WHERE_FROM, HOW_LONG_ANTALYA, SPECIALTY, EXPERIENCE, STACK,\
RECENT_PROJECTS, HOBBY, HOBBY_PARTNERS, LOOKING_JOB = range(13)


def start(update, _):
    """ /start command """
    user_id = update.message.from_user.id
    if update.message.chat.id != update.message.from_user.id:
        bot.deleteMessage(update.message.chat.id, update.message.message_id)
        return ConversationHandler.END

    user_data = users.find_one(filter={"_id": str(user_id)})

    if not user_data:
        update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å –º–µ–Ω—è –≤ —á–∞—Ç, –∏ —è —Å–¥–µ–ª–∞—é –≤—Å—ë —Å–∞–º.\n"
                                  "–í–ê–ñ–ù–û: –ù–ï –ó–ê–ë–£–î–¨ —Å–¥–µ–ª–∞—Ç—å –º–µ–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º üòâ")
        return ConversationHandler.END

    else:
        user_chats = [chat_id for chat_id, info in user_data["chats"].items() if info["need_intro"]]
        chat_names = [[chat["name"]] for chat in chats.find({"_id": {"$in": user_chats}})]

        chats_markup = ReplyKeyboardMarkup(chat_names, one_time_keyboard=True)
        update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç! –¢—ã –µ—â—ë –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è –≤ —ç—Ç–∏—Ö —á–∞—Ç–∞—Ö.\n"
                                  f"\n–í –∫–∞–∫–æ–º —Ö–æ—á–µ—à—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è?\n"
                                  f"–ò–ª–∏ /cancel, —á—Ç–æ–±—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä.", reply_markup=chats_markup)
        return CHAT


def chat(update, context):

    user_id = str(update.message.from_user.id)
    user_data = users.find_one(filter={"_id": user_id})
    chat = chats.find_one(filter={"name": update.message.text})
    if not chat:
        bot.sendMessage(update.message.from_user.id, "–ù–µ –∑–Ω–∞—é —ç—Ç–æ—Ç —á–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")
        return CHAT
    if chat['_id'] not in user_data["chats"]:
        bot.sendMessage(update.message.from_user.id, "–ù–µ –∑–Ω–∞—é —ç—Ç–æ—Ç —á–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")
        return CHAT
    else:
        users.update_one(filter={"_id": user_id},
                         update={"$set": {"now_introducing": str(chat['_id'])}})
        if not any(['test_whoisbot_2' in chat["name"],
                    'whois_test' in chat["name"],
                    "IT-pros of Anatolia" in chat["name"]]):
            bot.sendMessage(update.message.from_user.id, '–•–æ—Ä–æ—à–æ! –ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? '
                                                         '–ù–∞–∑–æ–≤–∏ –∏–º—è, –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º, –µ—Å–ª–∏ –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è.')
            return NAME
        else:
            bot.sendMessage(update.message.from_user.id, "–•–æ—Ä–æ—à–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ —á–∞—Ç–∞.")
            with open('whoisbot/rules.txt', 'r') as r:
                rules = r.read()
            bot.sendMessage(update.message.from_user.id, rules)
            bot.sendMessage(update.message.from_user.id, "–û–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏? –ù–∞–ø–∏—à–∏ –ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ –¥–∞.")
            return RULES


def rules(update, _):
    user_id = str(update.message.from_user.id)
    if update.message.text.strip().lower() not in {"—Ä–µ–¥–∏—Å–∫–∞", "radish"}:
        update.message.reply_text("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å, —á–∏—Ç–∞–π –ø—Ä–∞–≤–∏–ª–∞ –µ—â—ë —Ä–∞–∑ :)")
        return RULES
    else:
        bot.sendMessage(user_id, '–•–æ—Ä–æ—à–æ! –ö–∞–∫ –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è? '
                                 '–ù–∞–∑–æ–≤–∏ –∏–º—è, –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º, –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è.')
        return NAME


def name(update, _):
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = str(update.message.from_user.id)
    chat_id = users.find_one({"_id": user_id})["now_introducing"]
    users.update_one(filter={"_id": str(update.message.from_user.id)},
                     update={"$set": {f"chats.{chat_id}.info.name": update.message.text}})

    update.message.reply_text(
        '–•–æ—Ä–æ—à–æ! –°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?',
        reply_markup=ReplyKeyboardRemove(),
    )
    return AGE


def age(update, _):
    user_id = str(update.message.from_user.id)
    chat_id = users.find_one({"_id": user_id})["now_introducing"]
    users.update_one(filter={"_id": str(update.message.from_user.id)},
                     update={"$set": {f"chats.{chat_id}.info.age": update.message.text.strip()}})
    update.message.reply_text(
        "–û–∫! –û—Ç–∫—É–¥–∞ —Ç—ã –∫ –Ω–∞–º –ø—Ä–∏–µ—Ö–∞–ª(–∞)?"
    )
    return WHERE_FROM


def wherefrom(update, _):
    user_id = str(update.message.from_user.id)
    chat_id = users.find_one({"_id": user_id})["now_introducing"]
    users.update_one(filter={"_id": str(update.message.from_user.id)},
                     update={"$set": {f"chats.{chat_id}.info.from": update.message.text}})
    update.message.reply_text('–ü–æ–Ω—è–ª :) –ö–∞–∫ –¥–∞–≤–Ω–æ —Ç—ã –≤ –ê–Ω—Ç–∞–ª–∏–∏?')
    return HOW_LONG_ANTALYA


def howlongantalya(update, _):
    user_id = str(update.message.from_user.id)
    chat_id = users.find_one({"_id": user_id})["now_introducing"]
    users.update_one(filter={"_id": str(update.message.from_user.id)},
                     update={"$set": {f"chats.{chat_id}.info.in_antalya": update.message.text}})
    update.message.reply_text('–•–æ—Ä–æ—à–æ! –ö—Ç–æ —Ç—ã –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏?\n(—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –°++, –≤–µ–±-–¥–∏–∑–∞–π–Ω–µ—Ä, ... ?')
    return SPECIALTY


def specialty(update, _):
    user_id = str(update.message.from_user.id)
    chat_id = users.find_one({"_id": user_id})["now_introducing"]
    users.update_one(filter={"_id": str(update.message.from_user.id)},
                     update={"$set": {f"chats.{chat_id}.info.specialty": update.message.text}})
    update.message.reply_text('–ò —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç —Ç—ã —É–∂–µ –≤ —ç—Ç–æ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏? (–Ω–∞–ø–∏—à–∏ —á–∏—Å–ª–æ–º)')
    return EXPERIENCE


def experience(update, _):
    user_id = str(update.message.from_user.id)
    chat_id = users.find_one({"_id": user_id})["now_introducing"]
    users.update_one(filter={"_id": str(update.message.from_user.id)},
                     update={"$set": {f"chats.{chat_id}.info.years_experience": update.message.text.strip()}})
    update.message.reply_text(
        "–ê –≤ –∫–∞–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö —Ç—ã —Å–∏–ª—ë–Ω / —Å–∏–ª—å–Ω–∞? (—Ç–≤–æ–π —Å—Ç–µ–∫)"
    )
    return STACK


def stack(update, _):
    user_id = str(update.message.from_user.id)
    chat_id = users.find_one({"_id": user_id})["now_introducing"]
    users.update_one(filter={"_id": str(update.message.from_user.id)},
                     update={"$set": {f"chats.{chat_id}.info.stack": update.message.text}})
    update.message.reply_text('–û–∫! –†–∞—Å—Å–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ 25+ —Å–ª–æ–≤–∞—Ö, —á–µ–º –∑–∞–Ω–∏–º–∞–ª—Å—è(–ª–∞—Å—å) –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö?\n'
                              '–ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∏ (–∏ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ), —Ç–æ–∂–µ –¥–µ–ª–∏—Å—å :)')
    return RECENT_PROJECTS


def recent_projects(update, _):
    text = update.message.text
    if len(text.split()) < 25:
        update.message.reply_text('–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –±–æ–ª—å—à–µ, –º–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ :)')
        return RECENT_PROJECTS
    user_id = str(update.message.from_user.id)
    chat_id = users.find_one({"_id": user_id})["now_introducing"]
    users.update_one(filter={"_id": str(update.message.from_user.id)},
                     update={"$set": {f"chats.{chat_id}.info.recent_project": text}})
    update.message.reply_text('–ß–µ–º –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—à—å—Å—è? –ö–∞–∫–∏–µ —É —Ç–µ–±—è —É–≤–ª–µ—á–µ–Ω–∏—è, —Ö–æ–±–±–∏?')
    return HOBBY


def hobby(update, _):
    user_id = str(update.message.from_user.id)
    chat_id = users.find_one({"_id": user_id})["now_introducing"]
    users.update_one(filter={"_id": str(update.message.from_user.id)},
                     update={"$set": {f"chats.{chat_id}.info.hobby": update.message.text}})
    reply_keyboard = [['–î–∞', '–ù–µ—Ç']]
    markup_key = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text('–ò—â–µ—à—å –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤ –ø–æ —Ö–æ–±–±–∏?',
                              reply_markup=markup_key)
    return HOBBY_PARTNERS


def hobby_partners(update, _):
    user_id = str(update.message.from_user.id)
    chat_id = users.find_one({"_id": user_id})["now_introducing"]
    if update.message.text == '–î–∞':
        users.update_one(filter={"_id": str(update.message.from_user.id)},
                         update={"$set": {f"chats.{chat_id}.info.hobby_partners": 1}})
    else:
        users.update_one(filter={"_id": str(update.message.from_user.id)},
                         update={"$set": {f"chats.{chat_id}.info.hobby_partners": 0}})
    reply_keyboard = [['–î–∞', '–ù–µ—Ç']]
    markup_key = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True)
    update.message.reply_text('–ò –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å. –ò—â–µ—à—å —Ä–∞–±–æ—Ç—É?',
                              reply_markup=markup_key)
    return LOOKING_JOB


def looking_job(update, _):
    user_id = str(update.message.from_user.id)
    chat_id = users.find_one({"_id": user_id})["now_introducing"]
    if update.message.text == '–î–∞':
        users.update_one(filter={"_id": str(update.message.from_user.id)},
                         update={"$set": {f"chats.{chat_id}.info.looking_for_job": 1}})
    else:
        users.update_one(filter={"_id": str(update.message.from_user.id)},
                         update={"$set": {f"chats.{chat_id}.info.looking_for_job": 0}})

    update.message.reply_text('–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å!\n–¢–µ–ø–µ—Ä—å –≤—Å–µ –ø—Ä–æ —Ç–µ–±—è –∑–Ω–∞—é—Ç –±–æ–ª—å—à–µ, '
                              '–∏ —Ç—ã –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç–∏–∫ :) –í–µ–ª–∫–∞–º!',
                              reply_markup=ReplyKeyboardRemove())

    introduce_user(chat_id, user_id)

    return ConversationHandler.END


def cancel(update, _):
    user = update.message.from_user
    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –æ—Ç–º–µ–Ω–∏–ª —Ä–∞–∑–≥–æ–≤–æ—Ä.", user.first_name)

    update.message.reply_text(
        '–ù—É, –∫–∞–∫ —Ö–æ—á–µ—à—å. –ë—É–¥–µ—Ç –∂–µ–ª–∞–Ω–∏–µ - –ø–∏—à–∏.',
        reply_markup=ReplyKeyboardRemove()
    )

    return ConversationHandler.END


def help(update, _):
    """ /help command """
    bot.sendMessage(update.message.chat.id, "–ü—Ä–µ–∂–¥–µ, —á–µ–º –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç, –≥–¥–µ —è –∞–¥–º–∏–Ω (!),"
                                            " –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
                                            "–û—Ç–≤–µ—Ç–∏–ª? –û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—Å–µ –∑–Ω–∞—é—Ç, –∫—Ç–æ —Ç—ã :)\n"
                                            "–ù–µ –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∑–∞ –¥–µ–Ω—å, –∏–ª–∏ —É–ø–æ—Ä–Ω–æ –ø–∏—Å–∞–ª –≤ —á–∞—Ç –¥–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞? –ë–∞–Ω üòä\n"
                                            "–í–ê–ñ–ù–û: –ù–ï –ó–ê–ë–£–î–¨ —Å–¥–µ–ª–∞—Ç—å –º–µ–Ω—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n"
                                            "–Ø –∂–∏–≤—É –∑–¥–µ—Å—å: https://github.com/Pythonimous/whois_bot")
